[
  {
    "file": "/root/development/rtchat/lib/share_channel.dart",
    "content": "import 'package:flutter/services.dart';\n\nclass ShareChannel {\n  void Function(String)? onDataReceived;\n\n  ShareChannel() {\n    // If sharing resumes the app we will check to see if we received any shared data\n    SystemChannels.lifecycle.setMessageHandler((msg) async {\n      if (msg?.contains(\"resumed\") ?? false) {\n        getSharedText().then((String data) {\n          // Nothing was shared with us :(\n          if (data.isEmpty) {\n            return;\n          }\n          // We got something! Inform our listener.\n          onDataReceived?.call(data);\n        });\n      }\n      return;\n    });\n  }\n\n  static const _channel = MethodChannel('com.rtirl.chat/share');\n  Future<String> getSharedText() async {\n    return await _channel.invokeMethod<String>('getSharedData') ?? '';\n  }\n}"
  },
  {
    "file": "/root/development/rtchat/lib/urls.dart",
    "content": "import 'package:flutter_custom_tabs/flutter_custom_tabs.dart' as customtabs;\nimport 'package:url_launcher/url_launcher.dart';\n\nFuture<void> openUrl(Uri url) async {\n  if (!url.hasScheme) {\n    await customtabs.launch(url.replace(scheme: 'http').toString());\n  } else if (url.isScheme(\"http\") || url.isScheme(\"https\")) {\n    await customtabs.launch(url.toString());\n  } else {\n    await launchUrl(url);\n  }\n}"
  },
  {
    "file": "/root/development/rtchat/lib/tts_plugin.dart",
    "content": "import 'dart:async';\nimport 'dart:collection';\n\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/services.dart';\nimport 'package:rtchat/main.dart';\nimport 'package:rtchat/notifications_plugin.dart';\n\nclass TextToSpeechPlugin {\n  static const MethodChannel channel = MethodChannel('ttsPlugin');\n\n  static Future<void> updateTTSPreferences(double pitch, double speed) async {\n    try {\n      await channel.invokeMethod(\n          'updateTTSPreferences', {'pitch': pitch, 'speed': speed});\n    } catch (e) {\n      debugPrint(\"updateTTSPreferences error: $e\");\n    }\n  }\n\n  static Future<void> speak(String text,\n      {double? speed, double? volume}) async {\n    try {\n      await channel.invokeMethod(\n          'speak', {'text': text, 'speed': speed, 'volume': volume});\n    } catch (e) {\n      debugPrint(\"speak error: $e\");\n    }\n  }\n\n  static Future<Map<String, String>> getLanguages() async {\n    try {\n      final Map<dynamic, dynamic> languageMap =\n          await channel.invokeMethod('getLanguages');\n      return Map<String, String>.from(languageMap);\n    } catch (e) {\n      debugPrint(\"getLanguages error: $e\");\n      return <String, String>{};\n    }\n  }\n\n  static Future<void> stopSpeaking() async {\n    try {\n      await channel.invokeMethod('stopSpeaking');\n    } catch (e) {\n      debugPrint(\"stopSpeaking error: $e\");\n    }\n  }\n\n  static Future<void> disableTTS() async {\n    try {\n      await channel.invokeMethod('disableTTS');\n    } catch (e) {\n      debugPrint(\"disableTTS error: $e\");\n    }\n  }\n\n  static Future<void> clear() async {\n    try {\n      await channel.invokeMethod('clear');\n    } catch (e) {\n      debugPrint(\"clear error: $e\");\n    }\n  }\n}\n\nclass TTSQueue {\n  final Queue<TTSQueueElement> queue = Queue<TTSQueueElement>();\n  var _lastMessageTime = DateTime.now();\n\n  bool get isEmpty => queue.isEmpty;\n  int get length => queue.length;\n\n  Future<void> speak(String id, String text,\n      {double? speed, double? volume, DateTime? timestamp}) async {\n    final completer = Completer<void>();\n    final element = TTSQueueElement(id: id, text: text, completer: completer);\n\n    if (timestamp != null && timestamp.isBefore(_lastMessageTime)) {\n      return;\n    }\n    _lastMessageTime = timestamp ?? DateTime.now();\n\n    if (queue.length >= 20 && !readUserName) {\n      queue.clear();\n      await clear();\n      await disableTts();\n      await TextToSpeechPlugin.stopSpeaking();\n      await TextToSpeechPlugin.speak(\n          \"There are too many messages. Text to speech disabled\");\n      NotificationsPlugin.cancelNotification();\n      return;\n    }\n\n    if (queue.isNotEmpty) {\n      final previous = queue.last;\n      queue.addLast(element);\n      await previous.completer.future;\n      if (queue.firstOrNull != element) {\n        throw Exception('Message was deleted');\n      }\n      await TextToSpeechPlugin.speak(text, speed: speed ?? 1.5, volume: volume);\n      completer.complete();\n    } else {\n      queue.addLast(element);\n      await TextToSpeechPlugin.speak(text, speed: speed ?? 1.5, volume: volume);\n      completer.complete();\n    }\n    queue.remove(element);\n  }\n\n  bool get readUserName => queue.length < 10;\n\n  void delete(String id) {\n    if (queue.isNotEmpty && queue.first.id != id) {\n      queue.removeWhere((element) => element.id == id);\n    }\n  }\n\n  Future<void> clear() async {\n    queue.clear();\n  }\n\n  TTSQueueElement? peek() {\n    return queue.isNotEmpty ? queue.first : null;\n  }\n\n  Future<void> disableTts() async {\n    updateChannelSubscription(\"\");\n    TextToSpeechPlugin.disableTTS();\n  }\n}\n\nclass TTSQueueElement {\n  final String id;\n  final String text;\n  final Completer<void> completer;\n\n  TTSQueueElement(\n      {required this.id, required this.text, required this.completer});\n}"
  },
  {
    "file": "/root/development/rtchat/lib/notifications_plugin.dart",
    "content": "import 'package:flutter/cupertino.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/services.dart';\nimport 'package:rtchat/main.dart';\nimport 'package:rtchat/models/tts.dart';\nimport 'package:rtchat/tts_plugin.dart';\n\nclass NotificationsPlugin {\n  static const MethodChannel _channel = MethodChannel('tts_notifications');\n\n  static Future<void> showNotification() async {\n    try {\n      await _channel.invokeMethod('showNotification');\n    } catch (e) {\n      debugPrint(e.toString());\n    }\n  }\n\n  static Future<void> listenToTts(TtsModel model) async {\n    try {\n      debugPrint(\"Listening to TTS\");\n\n      _channel.setMethodCallHandler((call) async {\n        if (call.method == \"disableTTs\") {\n          model.newTtsEnabled = false;\n\n          updateChannelSubscription(\"\");\n          await TextToSpeechPlugin.speak(\"Text to speech disabled\");\n          await TextToSpeechPlugin.disableTTS();\n        }\n      });\n    } catch (e) {\n      debugPrint(\"Error listening to TTS : $e\");\n    }\n  }\n\n  static Future<void> cancelNotification() async {\n    try {\n      await _channel.invokeMethod('dismissNotification');\n    } catch (e) {\n      debugPrint(e.toString());\n    }\n  }\n}"
  },
  {
    "file": "/root/development/rtchat/lib/eager_drag_recognizer.dart",
    "content": "import 'package:flutter/gestures.dart';\n\n// HorizontalDragGestureRecognizer with priority in the gesture arena.\nclass EagerHorizontalDragRecognizer extends HorizontalDragGestureRecognizer {\n  @override\n  void addAllowedPointer(PointerDownEvent event) {\n    super.addAllowedPointer(event);\n    resolve(GestureDisposition.accepted);\n  }\n\n  @override\n  String get debugDescription => 'eager horizontal drag';\n}"
  },
  {
    "file": "/root/development/rtchat/lib/firebase_options.dart",
    "content": "// File generated by FlutterFire CLI.\n// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members\nimport 'package:firebase_core/firebase_core.dart' show FirebaseOptions;\nimport 'package:flutter/foundation.dart'\n    show defaultTargetPlatform, kIsWeb, TargetPlatform;\n\n/// Default [FirebaseOptions] for use with your Firebase apps.\n///\n/// Example:\n/// ```dart\n/// import 'firebase_options.dart';\n/// // ...\n/// await Firebase.initializeApp(\n///   options: DefaultFirebaseOptions.currentPlatform,\n/// );\n/// ```\nclass DefaultFirebaseOptions {\n  static FirebaseOptions get currentPlatform {\n    if (kIsWeb) {\n      throw UnsupportedError(\n        'DefaultFirebaseOptions have not been configured for web - '\n        'you can reconfigure this by running the FlutterFire CLI again.',\n      );\n    }\n    switch (defaultTargetPlatform) {\n      case TargetPlatform.android:\n        return android;\n      case TargetPlatform.iOS:\n        return ios;\n      case TargetPlatform.macOS:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions have not been configured for macos - '\n          'you can reconfigure this by running the FlutterFire CLI again.',\n        );\n      case TargetPlatform.windows:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions have not been configured for windows - '\n          'you can reconfigure this by running the FlutterFire CLI again.',\n        );\n      case TargetPlatform.linux:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions have not been configured for linux - '\n          'you can reconfigure this by running the FlutterFire CLI again.',\n        );\n      default:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions are not supported for this platform.',\n        );\n    }\n  }\n\n  static const FirebaseOptions android = FirebaseOptions(\n    apiKey: 'AIzaSyDv7Q7_HDpx9Us4LAMObNPV7k8XyCmJQVA',\n    appId: '1:832669896677:android:9a9d7b799cea587c60290c',\n    messagingSenderId: '832669896677',\n    projectId: 'rtchat-47692',\n    databaseURL: 'https://rtchat-47692-default-rtdb.firebaseio.com',\n    storageBucket: 'rtchat-47692.appspot.com',\n  );\n\n  static const FirebaseOptions ios = FirebaseOptions(\n    apiKey: 'AIzaSyBxXobwS3h1USRLIrhzyb_85CoRyPZHdoo',\n    appId: '1:832669896677:ios:59504132193d3b4e60290c',\n    messagingSenderId: '832669896677',\n    projectId: 'rtchat-47692',\n    databaseURL: 'https://rtchat-47692-default-rtdb.firebaseio.com',\n    storageBucket: 'rtchat-47692.appspot.com',\n    androidClientId:\n        '832669896677-bsjr7u9hpn4m7fg2nl0mgb6uvrjudct1.apps.googleusercontent.com',\n    iosClientId:\n        '832669896677-30itsabb94b1i9qd2uoo601tp4d4tlks.apps.googleusercontent.com',\n    iosBundleId: 'com.rtirl.chat',\n  );\n}"
  },
  {
    "file": "/root/development/rtchat/lib/screens/settings/tts/languages.dart",
    "content": "import 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\nimport 'package:rtchat/components/header_search_bar.dart';\nimport 'package:rtchat/models/tts.dart';\nimport 'package:rtchat/models/tts/language.dart';\n\nclass LanguagesScreen extends StatefulWidget {\n  const LanguagesScreen({super.key});\n\n  @override\n  State<LanguagesScreen> createState() => LanguagesScreenState();\n}\n\nclass LanguagesScreenState extends State<LanguagesScreen> {\n  var _isSearching = false;\n  late final HeaderSearchBar searchBarWidget;\n  List<String> filteredLanguages = [];\n  Widget animatedHeader = const Align(\n    alignment: Alignment.centerLeft,\n    child: Text('Languages'),\n  );\n\n  Future<List<String>> filterList(\n      List<String> list, String searchBarText) async {\n    return list\n        .where((String element) => Language(element)\n            .displayName(context)\n            .toLowerCase()\n            .contains(searchBarText.toLowerCase()))\n        .toList();\n  }\n\n  void onFilteredByText(String searchBarText) {\n    if (searchBarText.isEmpty) {\n      setState(() {\n        filteredLanguages = supportedLanguages;\n      });\n    } else {\n      Future.wait([\n        filterList(supportedLanguages, searchBarText)\n            .then((value) => filteredLanguages = value),\n      ]);\n      setState(() {\n        filteredLanguages = filteredLanguages;\n      });\n    }\n  }\n\n  @override\n  void initState() {\n    filteredLanguages.addAll(supportedLanguages);\n    searchBarWidget = HeaderSearchBar(\n      onFilterBySearchBarText: onFilteredByText,\n    );\n    super.initState();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      resizeToAvoidBottomInset: false,\n      appBar: AppBar(\n        title: AnimatedSwitcher(\n          duration: const Duration(milliseconds: 100),\n          child: animatedHeader,\n        ),\n        actions: [\n          IconButton(\n            onPressed: () {\n              setState(() {\n                _isSearching = !_isSearching;\n                if (_isSearching) {\n                  animatedHeader = searchBarWidget;\n                } else {\n                  filteredLanguages = supportedLanguages;\n                  animatedHeader = const Align(\n                    alignment: Alignment.centerLeft,\n                    child: Text(\n                      'Languages',\n                    ),\n                  );\n                }\n              });\n            },\n            icon: !_isSearching\n                ? const Icon(Icons.search)\n                : const Icon(Icons.close),\n            tooltip: !_isSearching ? 'Search languages' : 'Close search',\n          )\n        ],\n      ),\n      body: SafeArea(\n        child: Consumer<TtsModel>(\n          builder: (context, model, child) {\n            return ListView.builder(\n              itemBuilder: (BuildContext context, int index) {\n                final language = Language(filteredLanguages[index]);\n                return ListTile(\n                  title: Text(language.displayName(context)),\n                  onTap: () {\n                    model.language = language;\n                    Navigator.pop(context);\n                  },\n                );\n              },\n              itemCount: filteredLanguages.length,\n            );\n          },\n        ),\n      ),\n    );\n  }\n}"
  },
  {
    "file": "/root/development/rtchat/lib/screens/settings/tts/cloud_tts_purchases.dart",
    "content": "import 'package:flutter/material.dart';\nimport 'package:flutter_markdown/flutter_markdown.dart';\nimport 'package:provider/provider.dart';\nimport 'package:rtchat/models/product.dart';\nimport 'package:rtchat/models/purchases.dart';\nimport 'package:rtchat/models/user.dart';\nimport 'package:rtchat/product_list.dart';\n\nclass CloudTtsPurchasesScreen extends StatelessWidget {\n  const CloudTtsPurchasesScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    var purchases = context.watch<Purchases>();\n    Widget storeWidget;\n    switch (purchases.storeState) {\n      case StoreState.available:\n        storeWidget = const _ProductPage();\n        break;\n      case StoreState.loading:\n        storeWidget = const Center(child: CircularProgressIndicator());\n        break;\n      case StoreState.notAvailable:\n        storeWidget = Center(\n          child: Text(\n            \"Store not available\",\n            style: Theme.of(context).textTheme.headlineSmall,\n          ),\n        );\n        purchases.loadPurchases();\n        break;\n    }\n    return Scaffold(\n      appBar: AppBar(title: const Text(\"Text to speech\")),\n      body: storeWidget,\n    );\n  }\n}\n\nclass _ProductPage extends StatelessWidget {\n  const _ProductPage();\n\n  @override\n  Widget build(BuildContext context) {\n    var purchases = context.watch<Purchases>();\n    Product? product = purchases.getProduct(cloudTtsSubscription);\n    return SafeArea(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.spaceBetween,\n        children: [\n          Column(\n            mainAxisSize: MainAxisSize.min,\n            children: [\n              Padding(\n                padding:\n                    const EdgeInsets.symmetric(horizontal: 24, vertical: 16),\n                child: MarkdownBody(\n                  data: '''# High-Quality Text-to-Speech Voices\n                        \n* Unique voices for all of your viewers\n                        \n* Access to all Twitch-supported languages and more\n                        \n* No more robot speech!''',\n                  styleSheet: MarkdownStyleSheet(\n                    listBullet: Theme.of(context).textTheme.titleLarge,\n                    p: Theme.of(context).textTheme.titleLarge,\n                  ),\n                ),\n              ),\n            ],\n          ),\n          Column(\n            mainAxisSize: MainAxisSize.min,\n            children: [\n              const SizedBox(height: 16),\n              Padding(\n                padding: const EdgeInsets.symmetric(horizontal: 16),\n                child: Consumer<UserModel>(\n                  builder: (context, userModel, child) {\n                    String buttonText = 'Unavailable';\n                    switch (product?.status) {\n                      case ProductStatus.purchasable:\n                        buttonText = 'Subscribe';\n                        break;\n                      case ProductStatus.pending:\n                        buttonText = 'Pending';\n                        break;\n                      case ProductStatus.purchased:\n                        buttonText = 'Subscribed';\n                        break;\n                      default:\n                        break;\n                    }\n                    if (!userModel.isSignedIn()) {\n                      buttonText = 'Please Sign In';\n                    }\n\n                    return ElevatedButton(\n                      onPressed: userModel.isSignedIn() &&\n                              product!.status == ProductStatus.purchasable\n                          ? () => purchases.buy(product)\n                          : null,\n                      style: ElevatedButton.styleFrom(\n                        minimumSize: const Size.fromHeight(0),\n                        padding: const EdgeInsets.all(20),\n                        shape: RoundedRectangleBorder(\n                          borderRadius: BorderRadius.circular(24),\n                          side: const BorderSide(color: Colors.transparent),\n                        ),\n                      ),\n                      child: Text(\n                        buttonText,\n                        style: Theme.of(context)\n                            .textTheme\n                            .headlineSmall\n                            ?.copyWith(\n                              color: Theme.of(context).colorScheme.onPrimary,\n                            ),\n                      ),\n                    );\n                  },\n                ),\n              ),\n              Padding(\n                padding: const EdgeInsets.all(16.0),\n                child: Text(\n                  '${product != null ? '${product.price}/mo   ' : ''}Cancel at any time.',\n                ),\n              ),\n            ],\n          ),\n        ],\n      ),\n    );\n  }\n}"
  },
  {
    "file": "/root/development/rtchat/lib/screens/settings/tts/voices.dart",
    "content": "import 'dart:convert';\n\nimport 'package:cloud_functions/cloud_functions.dart';\nimport 'package:flutter/material.dart';\nimport 'package:just_audio/just_audio.dart';\nimport 'package:provider/provider.dart';\nimport 'package:rtchat/models/tts.dart';\nimport 'package:rtchat/models/tts/bytes_audio_source.dart';\n\nclass VoicesScreen extends StatelessWidget {\n  const VoicesScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final audioPlayer = AudioPlayer();\n    return Scaffold(\n      appBar: AppBar(title: const Text('Voices')),\n      body: Consumer<TtsModel>(\n        builder: (context, model, child) {\n          return ListView.builder(\n            itemBuilder: (BuildContext context, int index) => ListTile(\n              title: Text(model.voices[index]),\n              trailing: IconButton(\n                onPressed: () async {\n                  final response = await FirebaseFunctions.instance\n                      .httpsCallable(\"synthesize\")({\n                    \"voice\": model.voices[index],\n                    \"text\": \"kevin calmly and collectively consumes cheesecake\",\n                  });\n                  final bytes = const Base64Decoder().convert(response.data);\n                  audioPlayer.setAudioSource(BytesAudioSource(bytes));\n                  audioPlayer.play();\n                },\n                icon: const Icon(Icons.play_arrow),\n                tooltip: 'Play sample',\n              ),\n              onTap: () {\n                model.voice = model.voices[index];\n                Navigator.pop(context);\n              },\n            ),\n            itemCount: model.voices.length,\n          );\n        },\n      ),\n    );\n  }\n}"
  },
  {
    "file": "/root/development/rtchat/lib/screens/settings/backup.dart",
    "content": "import 'package:flutter/material.dart';\n\nclass BackupScreen extends StatefulWidget {\n  const BackupScreen({super.key});\n\n  @override\n  State<BackupScreen> createState() => _BackupScreenState();\n}\n\nclass _BackupScreenState extends State<BackupScreen> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text(\"Settings backup and restore\")),\n      body: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [\n          Text(\"Cloud backup\",\n              style: TextStyle(\n                color: Theme.of(context).colorScheme.secondary,\n                fontWeight: FontWeight.bold,\n              )),\n          const Text(\"Last backup: never\"),\n          Row(mainAxisAlignment: MainAxisAlignment.spaceAround, children: [\n            ElevatedButton.icon(\n                icon: const Icon(Icons.cloud_upload),\n                label: const Text(\"Back up\"),\n                onPressed: () {}),\n            ElevatedButton.icon(\n                icon: const Icon(Icons.cloud_download),\n                label: const Text(\"Restore\"),\n                onPressed: () {}),\n          ]),\n          const Divider(),\n          Text(\"Local backup\",\n              style: TextStyle(\n                color: Theme.of(context).colorScheme.secondary,\n                fontWeight: FontWeight.bold,\n              )),\n          Row(mainAxisAlignment: MainAxisAlignment.spaceAround, children: [\n            ElevatedButton.icon(\n                icon: const Icon(Icons.file_download),\n                label: const Text(\"Export\"),\n                onPressed: () {}),\n            ElevatedButton.icon(\n                icon: const Icon(Icons.file_upload),\n                label: const Text(\"Import\"),\n                onPressed: () {}),\n          ]),\n          const Divider(),\n        ]),\n      ),\n    );\n  }\n}"
  },
  {
    "file": "/root/development/rtchat/lib/screens/settings/twitch/badges.dart",
    "content": "import 'package:flutter/material.dart';\nimport 'package:flutter_gen/gen_l10n/app_localizations.dart';\nimport 'package:provider/provider.dart';\nimport 'package:rtchat/components/image/cross_fade_image.dart';\nimport 'package:rtchat/components/image/resilient_network_image.dart';\nimport 'package:rtchat/models/adapters/chat_state.dart';\nimport 'package:rtchat/models/messages/twitch/badge.dart';\n\nclass TwitchBadgesScreen extends StatelessWidget {\n  const TwitchBadgesScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Consumer<TwitchBadgeModel>(builder: (context, model, child) {\n      final badges = model.badgeSets;\n      badges.sort(badgePriorityComparator);\n      return Scaffold(\n        appBar: AppBar(\n          title: Text(AppLocalizations.of(context)!.twitchBadges),\n          actions: [\n            GestureDetector(\n              onTap: () => model.setAllEnabled(model.enabledCount == 0),\n              child: Row(children: [\n                Text(AppLocalizations.of(context)!.selectAll),\n                Checkbox.adaptive(\n                  tristate: true,\n                  value: model.enabledCount == 0\n                      ? false\n                      : (model.enabledCount == model.badgeCount ? true : null),\n                  onChanged: (value) {\n                    model.setAllEnabled(value ?? false);\n                  },\n                ),\n                const SizedBox(width: 20),\n              ]),\n            ),\n          ],\n        ),\n        body: ListView.builder(\n          itemCount: badges.length,\n          itemBuilder: (context, index) {\n            final badge = badges[index];\n            final lastVersion = badge.versions.last;\n            final image =\n                ResilientNetworkImage(Uri.parse(lastVersion.imageUrl4x));\n            return CheckboxListTile.adaptive(\n                secondary: CrossFadeImage(\n                    alignment: Alignment.center,\n                    placeholder: image.placeholderImage,\n                    image: image,\n                    width: 36,\n                    height: 36),\n                title: Text(lastVersion.title, overflow: TextOverflow.ellipsis),\n                subtitle: lastVersion.description == lastVersion.title ||\n                        lastVersion.description.trim().isEmpty\n                    ? null\n                    : Text(lastVersion.description,\n                        overflow: TextOverflow.ellipsis),\n                value: model.isEnabled(badge.setId),\n                onChanged: (value) {\n                  model.setEnabled(badge.setId, value ?? false);\n                });\n          },\n        ),\n      );\n    });\n  }\n\n  static int badgePriorityComparator(TwitchBadgeInfo a, TwitchBadgeInfo b) {\n    const highPriorityBadges = ['Moderator', 'VIP'];\n    var titleA = a.versions.last.title;\n    var titleB = b.versions.last.title;\n    var isAHighPriority = highPriorityBadges.contains(titleA);\n    var isBHighPriority = highPriorityBadges.contains(titleB);\n\n    if (isAHighPriority && isBHighPriority) {\n      return titleA\n          .compareTo(titleB); // If both are high priority, sort alphabetically.\n    } else if (isAHighPriority) {\n      return -1; // a is high priority, so it comes first.\n    } else if (isBHighPriority) {\n      return 1; // b is high priority, so it comes first.\n    } else {\n      return titleA.compareTo(titleB); // Otherwise, sort alphabetically.\n    }\n  }\n}"
  },
  {
    "file": "/root/development/rtchat/lib/screens/settings/events/hypetrain.dart",
    "content": "import 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\nimport 'package:rtchat/models/messages/twitch/eventsub_configuration.dart';\n\nclass HypetrainEventScreen extends StatelessWidget {\n  const HypetrainEventScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        appBar: AppBar(\n          title: const Text(\"Hypetrain Configuration\"),\n        ),\n        body: Consumer<EventSubConfigurationModel>(\n            builder: (context, model, child) {\n          return Column(\n            children: [\n              Padding(\n                padding: const EdgeInsets.all(16),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\"Pin duration after hypetrain is over\",\n                        style: TextStyle(\n                          color: Theme.of(context).colorScheme.secondary,\n                          fontWeight: FontWeight.bold,\n                        )),\n                    Slider.adaptive(\n                      value: model.hypetrainEventConfig.eventDuration.inSeconds\n                          .toDouble(),\n                      min: 0,\n                      max: 30,\n                      divisions: 15,\n                      label:\n                          \"${model.hypetrainEventConfig.eventDuration.inSeconds} seconds\",\n                      onChanged: (value) {\n                        model.setHypetrainEventDuration(\n                            Duration(seconds: value.toInt()));\n                      },\n                    ),\n                    SwitchListTile.adaptive(\n                      title: const Text('Enable event'),\n                      subtitle: const Text('Show event in chat history'),\n                      value: model.hypetrainEventConfig.showEvent,\n                      onChanged: (value) {\n                        model.setHypetrainEventShowable(value);\n                      },\n                    ),\n                  ],\n                ),\n              ),\n            ],\n          );\n        }));\n  }\n}"
  },
  {
    "file": "/root/development/rtchat/lib/screens/settings/events/cheer.dart",
    "content": "import 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\nimport 'package:rtchat/models/messages/twitch/eventsub_configuration.dart';\n\nclass CheerEventScreen extends StatelessWidget {\n  const CheerEventScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        appBar: AppBar(\n          title: const Text(\"Cheer Configuration\"),\n        ),\n        body: Consumer<EventSubConfigurationModel>(\n            builder: (context, model, child) {\n          return Column(\n            children: [\n              Padding(\n                padding: const EdgeInsets.all(16),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\"Pin Duration\",\n                        style: TextStyle(\n                          color: Theme.of(context).colorScheme.secondary,\n                          fontWeight: FontWeight.bold,\n                        )),\n                    Slider.adaptive(\n                      value: model.cheerEventConfig.eventDuration.inSeconds\n                          .toDouble(),\n                      min: 0,\n                      max: 30,\n                      divisions: 15,\n                      label:\n                          \"${model.cheerEventConfig.eventDuration.inSeconds} seconds\",\n                      onChanged: (value) {\n                        model.setCheerEventDuration(\n                            Duration(seconds: value.toInt()));\n                      },\n                    ),\n                    SwitchListTile.adaptive(\n                      title: const Text('Enable event'),\n                      subtitle: const Text('Show event in chat history'),\n                      value: model.cheerEventConfig.showEvent,\n                      onChanged: (value) {\n                        model.setCheerEventShowable(value);\n                      },\n                    ),\n                  ],\n                ),\n              ),\n            ],\n          );\n        }));\n  }\n}"
  },
  {
    "file": "/root/development/rtchat/lib/screens/settings/events/host.dart",
    "content": "import 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\nimport 'package:rtchat/models/messages/twitch/eventsub_configuration.dart';\n\nclass HostEventScreen extends StatelessWidget {\n  const HostEventScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        appBar: AppBar(\n          title: const Text(\"Host Configuration\"),\n        ),\n        body: Consumer<EventSubConfigurationModel>(\n            builder: (context, model, child) {\n          return Column(\n            children: [\n              Padding(\n                padding: const EdgeInsets.all(16),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\"Pin Duration\",\n                        style: TextStyle(\n                          color: Theme.of(context).colorScheme.secondary,\n                          fontWeight: FontWeight.bold,\n                        )),\n                    Slider.adaptive(\n                      value: model.hostEventConfig.eventDuration.inSeconds\n                          .toDouble(),\n                      min: 0,\n                      max: 30,\n                      divisions: 15,\n                      label:\n                          \"${model.hostEventConfig.eventDuration.inSeconds} seconds\",\n                      onChanged: (value) {\n                        model.setHostEventDuration(\n                            Duration(seconds: value.toInt()));\n                      },\n                    ),\n                    SwitchListTile.adaptive(\n                      title: const Text('Enable event'),\n                      subtitle: const Text('Show event in chat history'),\n                      value: model.hostEventConfig.showEvent,\n                      onChanged: (value) {\n                        model.setHostEventShowable(value);\n                      },\n                    ),\n                  ],\n                ),\n              ),\n            ],\n          );\n        }));\n  }\n}"
  },
  {
    "file": "/root/development/rtchat/lib/screens/settings/events/channel_point.dart",
    "content": "import 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\nimport 'package:rtchat/models/messages/twitch/eventsub_configuration.dart';\n\nclass ChannelPointRedemptionEventScreen extends StatelessWidget {\n  const ChannelPointRedemptionEventScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        appBar: AppBar(\n          title: const Text(\"Channel Point Configuration\"),\n        ),\n        body: Consumer<EventSubConfigurationModel>(\n            builder: (context, model, child) {\n          return Column(\n            children: [\n              Padding(\n                padding: const EdgeInsets.all(16),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\"Pin Duration\",\n                        style: TextStyle(\n                          color: Theme.of(context).colorScheme.secondary,\n                          fontWeight: FontWeight.bold,\n                        )),\n                    Slider.adaptive(\n                      value: model.channelPointRedemptionEventConfig\n                          .eventDuration.inSeconds\n                          .toDouble(),\n                      min: 0,\n                      max: 30,\n                      divisions: 15,\n                      label:\n                          \"${model.channelPointRedemptionEventConfig.eventDuration.inSeconds} seconds\",\n                      onChanged: (value) {\n                        model.setChannelPointRedemptionEventDuration(\n                            Duration(seconds: value.toInt()));\n                      },\n                    ),\n                    Text(\"Additional Pin Duration for Unfulfilled Rewards\",\n                        style: TextStyle(\n                          color: Theme.of(context).colorScheme.secondary,\n                          fontWeight: FontWeight.bold,\n                        )),\n                    Slider.adaptive(\n                      value: model.channelPointRedemptionEventConfig\n                          .unfulfilledAdditionalDuration.inSeconds\n                          .toDouble(),\n                      min: 0,\n                      max: 30,\n                      divisions: 15,\n                      label:\n                          \"${model.channelPointRedemptionEventConfig.unfulfilledAdditionalDuration.inSeconds} seconds\",\n                      onChanged: (value) {\n                        model\n                            .setChannelPointRedemptionEventUnfulfilledAdditionalDuration(\n                                Duration(seconds: value.toInt()));\n                      },\n                    ),\n                    SwitchListTile.adaptive(\n                      title: const Text('Enable event'),\n                      subtitle: const Text('Show event in chat history'),\n                      value: model.channelPointRedemptionEventConfig.showEvent,\n                      onChanged: (value) {\n                        model.setChannelPointRedemptionEventShowable(value);\n                      },\n                    ),\n                  ],\n                ),\n              )\n            ],\n          );\n        }));\n  }\n}"
  },
  {
    "file": "/root/development/rtchat/lib/screens/settings/events/follow.dart",
    "content": "import 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\nimport 'package:rtchat/models/messages/twitch/eventsub_configuration.dart';\n\nclass FollowEventScreen extends StatelessWidget {\n  const FollowEventScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        appBar: AppBar(\n          title: const Text(\"Follow Configuration\"),\n        ),\n        body: Consumer<EventSubConfigurationModel>(\n            builder: (context, model, child) {\n          return Column(\n            children: [\n              Padding(\n                padding: const EdgeInsets.all(16),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\"Pin Duration\",\n                        style: TextStyle(\n                          color: Theme.of(context).colorScheme.secondary,\n                          fontWeight: FontWeight.bold,\n                        )),\n                    Slider.adaptive(\n                      value: model.followEventConfig.eventDuration.inSeconds\n                          .toDouble(),\n                      min: 0,\n                      max: 30,\n                      divisions: 15,\n                      label:\n                          \"${model.followEventConfig.eventDuration.inSeconds} seconds\",\n                      onChanged: (value) {\n                        model.setFollowEventDuration(\n                            Duration(seconds: value.toInt()));\n                      },\n                    ),\n                    SwitchListTile.adaptive(\n                      title: const Text('Enable event'),\n                      subtitle: const Text('Show event in chat history'),\n                      value: model.followEventConfig.showEvent,\n                      onChanged: (value) {\n                        model.setFollowEventShowable(value);\n                      },\n                    ),\n                  ],\n                ),\n              ),\n            ],\n          );\n        }));\n  }\n}"
  },
  {
    "file": "/root/development/rtchat/lib/screens/settings/events/raiding.dart",
    "content": "import 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\nimport 'package:rtchat/models/messages/twitch/eventsub_configuration.dart';\n\nclass RaidingEventScreen extends StatelessWidget {\n  const RaidingEventScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        appBar: AppBar(\n          title: const Text(\"Outgoing Raid Configuration\"),\n        ),\n        body: Consumer<EventSubConfigurationModel>(\n            builder: (context, model, child) {\n          return Column(\n            children: [\n              Padding(\n                padding: const EdgeInsets.all(16),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\"Pin Duration\",\n                        style: TextStyle(\n                          color: Theme.of(context).colorScheme.secondary,\n                          fontWeight: FontWeight.bold,\n                        )),\n                    Slider.adaptive(\n                      value: model.raidingEventConfig.eventDuration.inSeconds\n                          .toDouble(),\n                      min: 0,\n                      max: 150,\n                      divisions: 15,\n                      label:\n                          \"${model.raidingEventConfig.eventDuration.inSeconds} seconds\",\n                      onChanged: (value) {\n                        model.setRaidingEventDuration(\n                            Duration(seconds: value.toInt()));\n                      },\n                    ),\n                    SwitchListTile.adaptive(\n                      title: const Text('Enable event'),\n                      subtitle: const Text('Show event in chat history'),\n                      value: model.raidingEventConfig.showEvent,\n                      onChanged: (value) {\n                        model.setRaidingEventShowable(value);\n                      },\n                    ),\n                  ],\n                ),\n              ),\n            ],\n          );\n        }));\n  }\n}"
  },
  {
    "file": "/root/development/rtchat/lib/screens/settings/events/prediction.dart",
    "content": "import 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\nimport 'package:rtchat/models/messages/twitch/eventsub_configuration.dart';\n\nclass PredictionEventScreen extends StatelessWidget {\n  const PredictionEventScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        appBar: AppBar(\n          title: const Text('Prediction Configuration'),\n        ),\n        body: Consumer<EventSubConfigurationModel>(\n            builder: (context, model, child) {\n          return Column(\n            children: [\n              Padding(\n                padding: const EdgeInsets.all(16),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text('Pin Duration',\n                        style: TextStyle(\n                          color: Theme.of(context).colorScheme.secondary,\n                          fontWeight: FontWeight.bold,\n                        )),\n                    Slider.adaptive(\n                      value: model.predictionEventConfig.eventDuration.inSeconds\n                          .toDouble(),\n                      min: 0,\n                      max: 30,\n                      divisions: 15,\n                      label:\n                          '${model.predictionEventConfig.eventDuration.inSeconds} seconds',\n                      onChanged: (value) {\n                        model.setPredictionEventDuration(\n                            Duration(seconds: value.toInt()));\n                      },\n                    ),\n                    SwitchListTile.adaptive(\n                      title: const Text('Enable event'),\n                      subtitle: const Text('Show event in chat history'),\n                      value: model.predictionEventConfig.showEvent,\n                      onChanged: (value) {\n                        model.setPredictionEventShowable(value);\n                      },\n                    ),\n                  ],\n                ),\n              ),\n            ],\n          );\n        }));\n  }\n}"
  },
  {
    "file": "/root/development/rtchat/lib/screens/settings/events/raid.dart",
    "content": "import 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\nimport 'package:rtchat/models/messages/twitch/eventsub_configuration.dart';\n\nclass RaidEventScreen extends StatelessWidget {\n  const RaidEventScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        appBar: AppBar(\n          title: const Text(\"Raid Configuration\"),\n        ),\n        body: Consumer<EventSubConfigurationModel>(\n            builder: (context, model, child) {\n          return Column(\n            children: [\n              Padding(\n                padding: const EdgeInsets.all(16),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\"Pin Duration\",\n                        style: TextStyle(\n                          color: Theme.of(context).colorScheme.secondary,\n                          fontWeight: FontWeight.bold,\n                        )),\n                    Slider.adaptive(\n                      value: model.raidEventConfig.eventDuration.inSeconds\n                          .toDouble(),\n                      min: 0,\n                      max: 30,\n                      divisions: 15,\n                      label:\n                          \"${model.raidEventConfig.eventDuration.inSeconds} seconds\",\n                      onChanged: (value) {\n                        model.setRaidEventDuration(\n                            Duration(seconds: value.toInt()));\n                      },\n                    ),\n                    SwitchListTile.adaptive(\n                      title: const Text('Enable event'),\n                      subtitle: const Text('Show event in chat history'),\n                      value: model.raidEventConfig.showEvent,\n                      onChanged: (value) {\n                        model.setRaidEventShowable(value);\n                      },\n                    ),\n                    SwitchListTile.adaptive(\n                      title: const Text('Enable shoutouts'),\n                      subtitle: const Text(\n                          'Send a link to the raiding channel to chat'),\n                      value: model.raidEventConfig.enableShoutoutButton,\n                      onChanged: (value) {\n                        model.setRaidEventEnableShoutoutButton(value);\n                      },\n                    ),\n                  ],\n                ),\n              ),\n            ],\n          );\n        }));\n  }\n}"
  },
  {
    "file": "/root/development/rtchat/lib/screens/settings/events/subscription.dart",
    "content": "import 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\nimport 'package:rtchat/models/messages/twitch/eventsub_configuration.dart';\n\nclass SubscriptionEventScreen extends StatelessWidget {\n  const SubscriptionEventScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        appBar: AppBar(\n          title: const Text(\"Subscription Configuration\"),\n        ),\n        body: Consumer<EventSubConfigurationModel>(\n            builder: (context, model, child) {\n          return Column(\n            children: [\n              Padding(\n                padding: const EdgeInsets.all(16),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\"Pin Duration\",\n                        style: TextStyle(\n                          color: Theme.of(context).colorScheme.secondary,\n                          fontWeight: FontWeight.bold,\n                        )),\n                    Slider.adaptive(\n                      value: model\n                          .subscriptionEventConfig.eventDuration.inSeconds\n                          .toDouble(),\n                      min: 0,\n                      max: 30,\n                      divisions: 15,\n                      label:\n                          \"${model.subscriptionEventConfig.eventDuration.inSeconds} seconds\",\n                      onChanged: (value) {\n                        model.setSubscriptionEventDuration(\n                            Duration(seconds: value.toInt()));\n                      },\n                    ),\n                    SwitchListTile.adaptive(\n                      title: const Text('Enable event'),\n                      subtitle: const Text('Show event in chat history'),\n                      value: model.subscriptionEventConfig.showEvent,\n                      onChanged: (value) {\n                        model.setSubscriptionEventShowable(value);\n                      },\n                    ),\n                    SwitchListTile.adaptive(\n                      title:\n                          const Text('Enable individual gifted subscriptions'),\n                      subtitle:\n                          const Text('Show every subscription that is gifted'),\n                      value: model.subscriptionEventConfig.showIndividualGifts,\n                      onChanged: (value) {\n                        model.setGiftSubscriptionStatus(value);\n                      },\n                    )\n                  ],\n                ),\n              ),\n            ],\n          );\n        }));\n  }\n}"
  },
  {
    "file": "/root/development/rtchat/lib/screens/settings/events/subscription.dart",
    "content": "import 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\nimport 'package:rtchat/models/messages/twitch/eventsub_configuration.dart';\n\nclass SubscriptionEventScreen extends StatelessWidget {\n  const SubscriptionEventScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        appBar: AppBar(\n          title: const Text(\"Subscription Configuration\"),\n        ),\n        body: Consumer<EventSubConfigurationModel>(\n            builder: (context, model, child) {\n          return Column(\n            children: [\n              Padding(\n                padding: const EdgeInsets.all(16),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\"Pin Duration\",\n                        style: TextStyle(\n                          color: Theme.of(context).colorScheme.secondary,\n                          fontWeight: FontWeight.bold,\n                        )),\n                    Slider.adaptive(\n                      value: model\n                          .subscriptionEventConfig.eventDuration.inSeconds\n                          .toDouble(),\n                      min: 0,\n                      max: 30,\n                      divisions: 15,\n                      label:\n                          \"${model.subscriptionEventConfig.eventDuration.inSeconds} seconds\",\n                      onChanged: (value) {\n                        model.setSubscriptionEventDuration(\n                            Duration(seconds: value.toInt()));\n                      },\n                    ),\n                    SwitchListTile.adaptive(\n                      title: const Text('Enable event'),\n                      subtitle: const Text('Show event in chat history'),\n                      value: model.subscriptionEventConfig.showEvent,\n                      onChanged: (value) {\n                        model.setSubscriptionEventShowable(value);\n                      },\n                    ),\n                    SwitchListTile.adaptive(\n                      title:\n                          const Text('Enable individual gifted subscriptions'),\n                      subtitle:\n                          const Text('Show every subscription that is gifted'),\n                      value: model.subscriptionEventConfig.showIndividualGifts,\n                      onChanged: (value) {\n                        model.setGiftSubscriptionStatus(value);\n                      },\n                    )\n                  ],\n                ),\n              ),\n            ],\n          );\n        }));\n  }\n}"
  },
  {
    "file": "/root/development/rtchat/lib/screens/settings/events/subscription.dart",
    "content": "import 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\nimport 'package:rtchat/models/messages/twitch/eventsub_configuration.dart';\n\nclass SubscriptionEventScreen extends StatelessWidget {\n  const SubscriptionEventScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        appBar: AppBar(\n          title: const Text(\"Subscription Configuration\"),\n        ),\n        body: Consumer<EventSubConfigurationModel>(\n            builder: (context, model, child) {\n          return Column(\n            children: [\n              Padding(\n                padding: const EdgeInsets.all(16),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\"Pin Duration\",\n                        style: TextStyle(\n                          color: Theme.of(context).colorScheme.secondary,\n                          fontWeight: FontWeight.bold,\n                        )),\n                    Slider.adaptive(\n                      value: model\n                          .subscriptionEventConfig.eventDuration.inSeconds\n                          .toDouble(),\n                      min: 0,\n                      max: 30,\n                      divisions: 15,\n                      label:\n                          \"${model.subscriptionEventConfig.eventDuration.inSeconds} seconds\",\n                      onChanged: (value) {\n                        model.setSubscriptionEventDuration(\n                            Duration(seconds: value.toInt()));\n                      },\n                    ),\n                    SwitchListTile.adaptive(\n                      title: const Text('Enable event'),\n                      subtitle: const Text('Show event in chat history'),\n                      value: model.subscriptionEventConfig.showEvent,\n                      onChanged: (value) {\n                        model.setSubscriptionEventShowable(value);\n                      },\n                    ),\n                    SwitchListTile.adaptive(\n                      title:\n                          const Text('Enable individual gifted subscriptions'),\n                      subtitle:\n                          const Text('Show every subscription that is gifted'),\n                      value: model.subscriptionEventConfig.showIndividualGifts,\n                      onChanged: (value) {\n                        model.setGiftSubscriptionStatus(value);\n                      },\n                    )\n                  ],\n                ),\n              ),\n            ],\n          );\n        }));\n  }\n}"
  }
]